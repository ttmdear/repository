# vi:syntax=bash

# Zależności 
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
<dependency>
    <groupId>ch.qos.logback</groupId>
    <artifactId>logback-core</artifactId>
    <version>1.2.5</version>
</dependency>

<!-- W łatwy sposób możemy użyć SLF4j jako fasady -->
<dependency>
    <groupId>org.slf4j</groupId>
    <artifactId>slf4j-api</artifactId>
    <version>1.7.30</version>
</dependency>

# Tworzymy plik logback.xml w katalogu resources
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
<configuration>
  <appender name="FILE" class="ch.qos.logback.core.FileAppender">
    <file>myApp.log</file>
    <encoder>
      <pattern>%date %level [%thread] %logger{10} [%file:%line] %msg%n</pattern>
    </encoder>
  </appender>
  <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
    <encoder>
      <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
    </encoder>
  </appender>
  <root level="debug">
    <appender-ref ref="FILE" />
    <appender-ref ref="STDOUT" />
  </root>
</configuration>

# Wywołanie
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Example {
    private static final Logger logger = LoggerFactory.getLogger(Example.class);
    public static void main(String[] args) {
        logger.info("Example log from {}", Example.class.getSimpleName());
    }
}

# Rolowanie
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Jest to proces polegający na odkładaniu logów w uporządkowany sposób. W tym
# procesie na ogół powstają kolejne pliki logów historycznych z datami.
<file>logs/audit.log</file>
<append>true</append>
<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
    <fileNamePattern>@audit.output.dir@/${HOSTNAME}-%d{yyyyMMddhhmm}%d{ss, aux}</fileNamePattern>
    <maxHistory>30</maxHistory>
    <totalSizeCap>3GB</totalSizeCap>
</rollingPolicy>

# Do konfiguracji można wykorzystać implementację TimeBasedRollingPolicy.
# Sposób odkładania i nazwy plików logów oparte są na wyrażeniu
# fileNamePattern a dokładnie tej części zawartej w %d{...}. Wyrażenie
# zawarte w środku jest parsowane i wskazuje czy jest to jeszcze aktualna
# paczka czy już następna. W powyższym przykładzie zdefiniowałem drugie
# wyrażenie %d{} do odczytania sekund. To wyrażenie jest nie brane pod uwagę
# przy paczkowaniu dlatego ma dopisek aux.
# W przypadku tej konfiguracji zostaną wygenerowane takie logi:
#
# -rw-r--r-- 1 pbobryk 1049089 24174 lut 22 12:36 audit.log
# -rw-r--r-- 1 pbobryk 1049089 48348 lut 22 12:25 nbkpcsi244-20210222122537
# -rw-r--r-- 1 pbobryk 1049089 24174 lut 22 12:26 nbkpcsi244-20210222122617
